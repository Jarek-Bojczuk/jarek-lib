version: 2.1

orbs:
  artifactory: circleci/artifactory@1.0.0

workflows:
  version: 2
  build_and_push_patch:
    jobs:
    - test:
        context: circleci-build-context
        repo-env: dev
    - hold:
        type: approval
        context: circleci-build-context
        requires:
          - test
    - build_and_push:
        context: circleci-build-context
        push_type: patch
        repo-env: dev
        requires:
          - hold
  build_and_push_minor:
    jobs:
    - test:
        context: circleci-build-context
        repo-env: dev
    - hold:
        type: approval
        context: circleci-build-context
        requires:
          - test
    - build_and_push:
        context: circleci-build-context
        push_type: minor
        repo-env: dev
        requires:
          - hold
  build_and_push_major:
    jobs:
    - test:
        context: circleci-build-context
        repo-env: dev
    - hold:
        type: approval
        context: circleci-build-context
        requires:
          - test
    - build_and_push:
        context: circleci-build-context
        push_type: major
        repo-env: dev
        requires:
          - hold

jobs:
  test:
    parameters:
      repo-env:
        type: string
        default: dev
    environment:
      PYPI_REPOSITORY_URL: monacohq.jfrog.io/artifactory/api/pypi/finance-pypi-<< parameters.repo-env >>
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r ci-requirements.txt --extra-index-url https://${ARTIFACTORY_USER}:${ARTIFACTORY_API_KEY}@$PYPI_REPOSITORY_URL/simple
            pip install -r requirements.txt --extra-index-url https://${ARTIFACTORY_USER}:${ARTIFACTORY_API_KEY}@$PYPI_REPOSITORY_URL/simple
      - run:
          name: Run tests
          command: |
            python -m pytest --junitxml=./test-results/pytests.xml --cov=./ --cov-report=xml:./test-results/coverage.xml -sv --html ./test-results/report.html
      - store_artifacts:
          path: ./test-results
      - store_test_results:
          path: ./test-results
      - run:
          name: Create wheel dist
          command: |
            export GIT_TAG=0.0.0
            python setup.py bdist_wheel
      - run:
          name: Install wheel package
          command: |
            pip install ./dist/python_jarek_fdt_ci-0.5.0-py3-none-any.whl \
            --extra-index-url https://${ARTIFACTORY_USER}:${ARTIFACTORY_API_KEY}@$PYPI_REPOSITORY_URL/simple
  build_and_push:
    parameters:
      push_type:
        type: string
      repo-env:
        type: string
        default: dev
    environment:
      PUSH_TYPE: <<parameters.push_type >>
      PYPI_REPOSITORY: finance-pypi-<< parameters.repo-env >>
      PYPI_REPOSITORY_URL: monacohq.jfrog.io/artifactory/api/pypi/finance-pypi-<< parameters.repo-env >>
    docker:
      - image: cimg/python:3.10.2
    working_directory: ~/project
    steps:
      - checkout
      - run:
          name: init .pypirc
          command: |
            echo -e "[distutils]" >> ~/.pypirc
            echo -e "index-servers = $PYPI_REPOSITORY" >> ~/.pypirc
            echo -e "[$PYPI_REPOSITORY]" >> ~/.pypirc
            echo -e "repository: https://$PYPI_REPOSITORY_URL" >> ~/.pypirc
            echo -e "username: $ARTIFACTORY_USER" >> ~/.pypirc
            echo -e "password: $ARTIFACTORY_API_KEY" >> ~/.pypirc
            cat ~/.pypirc
      - run:
          name: Build and Publish
          command: |
            chmod 755 ./publish.sh
            make publish
      #- run:
      #    name: Build library
      #    command: python3 setup.py bdist_wheel
      #- run:
      #    name: Publish
      #    command: twine upload -r $PYPI_REPOSITORY dist/*